(defpackage :binarydiagnostic
  (:use :cl)
  (:export :run-binarydiagnostic)
)
(in-package :binarydiagnostic)

(defun get-file (filename)
  (with-open-file (stream filename)
    (loop for line = (read-line stream nil)
      while line
      collect line
    )
  )
)

(defun countTheOnes (data len)
  (setf ones (make-array len :initial-element 0))
  (dolist (entry data)
    (loop for index from 0 to (- len 1)
      do (if (char= (char entry index) #\1) (setf (aref ones index) (+ (aref ones index) 1)))
    )
  )
  ones
)

(defun mostCommonAtIndex (data index)
  (setq onesCount 0)
  (dolist (entry data)
    (if (char= (char entry index) #\1) (setq onesCount (+ onesCount 1)))
  )
  (if (>= onesCount (- (length data) onesCount)) #\1 #\0)
)

(defun subData (data target index)
  (setq newData '())
  (dolist (entry data)
    (if (char= (char entry index) target) (setq newData (append newData (list entry))))
  )
  newData
)

(defun challenge1 (inputData)
  (setq gamma 0)
  (setq epsilon 0)
  (setq elemLength (length (nth 0 inputData)))
  (setq count (length inputData))
  (setq ones (countTheOnes inputData elemLength))
  (loop for index from 0 to (- elemLength 1)
    do (if (> (aref ones index) (/ count 2)) (setq gamma (+ gamma (ash 1 (- (- elemLength 1) index)))) (setq epsilon (+ epsilon (ash 1 (- (- elemLength 1) index)))))
  )
  (* gamma epsilon)
)

(defun challenge2 (inputData)
  (setq o2 0)
  (setq co2 0)
  (setq elemLength (length (nth 0 inputData)))
  (setq o2data (copy-list inputData))
  (setq co2data (copy-list inputData))
  (block o2loop
    (loop for index from 0 to (- elemLength 1)
      do (if (/= o2 0) (return-from o2loop))
      (setq mostCommono2 (mostCommonAtIndex o2data index))
      (setq o2data (subData o2data mostCommono2 index))
      (if (= (length o2data) 1) (setq o2 (parse-integer (nth 0 o2data) :radix 2)))
    )
  )
  (block co2loop
    (loop for index from 0 to (- elemLength 1)
      do (if (/= co2 0) (return-from co2loop))
      (setq mostCommonco2 (mostCommonAtIndex co2data index))
      (setq leastCommonco2 (if (char= mostCommonco2 #\1) #\0 #\1))
      (setq co2data (subData co2data leastCommonco2 index))
      (if (= (length co2data) 1) (setq co2 (parse-integer (nth 0 co2data) :radix 2)))
    )
  )
  (* o2 co2)
)

(defun run-binarydiagnostic ()
  (format t "Day 3 - Binary Diagnostic~C" #\linefeed)
  (setq fileData (get-file "binarydiagnostic/input.txt"))
  (format t "Challenge 1: ~d~C" (challenge1 fileData) #\linefeed)
  (format t "Challenge 2: ~d~C" (challenge2 fileData) #\linefeed)
)
